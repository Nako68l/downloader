<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">

    <meta name="author" content="Benjamin Winterberg">
    <meta name="description" content="Learn multi-threaded programming with Java 8 by example: This first tutorial covers Threads, Tasks and Executors.">
    <meta name="keywords" content="java, javascript, html, css, spring, hibernate, framework, computer, mobile, design, software, architecture, programming, development, engineering, code, pattern">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="white">

    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="white">

    <title>Java 8 Concurrency Tutorial: Threads and Executors - Benjamin Winterberg</title>

    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@winterbe_">
    <meta name="twitter:title" content="winterbe.com">
    <meta name="twitter:description" content="Learn multi-threaded programming with Java 8 by example: This first tutorial covers Threads, Tasks and Executors.">
    <meta name="twitter:image:src" content="http://winterbe.com/image/winterbe.png">

    <link rel="shortcut icon" href="/favicon.ico">
    <link rel="apple-touch-icon" href="/apple-touch-icon.png">

    <link rel="publisher" href="https://plus.google.com/105973259367211176218/">
    <link rel="author" href="https://plus.google.com/105973259367211176218/posts">

    <meta itemprop="name" content="Benjamin Winterberg">
    <meta itemprop="description" content="Learn multi-threaded programming with Java 8 by example: This first tutorial covers Threads, Tasks and Executors.">

    <link rel="alternate" type="application/rss+xml" title="Benjamin Winterberg" href="http://feeds.feedburner.com/winterbe">
    <link rel="alternate" type="application/atom+xml" title="Benjamin Winterberg" href="http://winterbe.com/atom.xml">

    <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">

    <link rel="apple-touch-icon" href="/apple-touch-icon.png">
    <link rel="apple-touch-icon" sizes="57x57" href="/image/apple-touch-icon-57.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/image/apple-touch-icon-72.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/image/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/image/apple-touch-icon-144.png">

    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/prism.css">



    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-48569937-1', 'auto');
  ga('set', 'anonymizeIp', true);
  ga('send', 'pageview');

</script>

</head>
<body>

<div class="container">
    <header>
        <a class="logo" href="/">W</a>
<nav>
    <div id="nav-links" class="links">
        <span class="page-links">
            <a href="/blog/">Blog</a>
            <a href="/projects/">Projects</a>
            <a href="/vita/">Vita</a>
            <a href="/contact/">Contact</a>
        </span>
        <span class="social-links hide">
            <a href="http://feeds.feedburner.com/winterbe">RSS</a>
            <a href="https://github.com/winterbe">GitHub</a>
            <a href="https://plus.google.com/105973259367211176218/" rel="author">Google+</a>
            <a href="https://twitter.com/winterbe_">Twitter</a>
        </span>
        <a href="#" class="btn" data-toggle="follow">Follow</a>
    </div>
    <a class="menu-icon">&#9776;</a>
</nav>

    </header>

    <div class="content">
        <h1 class="page-title">Java 8 Concurrency Tutorial: Threads and Executors</h1>

<p class="page-subtitle" data-page-url="http://winterbe.com/posts/2015/04/07/java8-concurrency-tutorial-thread-executor-examples/">
    <span class="post-date">April 07, 2015</span><br>
    <span class="share-count-total"></span>
</p>

<div id="carbonads-container">
    <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?zoneid=1673&serve=C6AILKT&placement=winterbecom" id="_carbonads_js"></script>
</div>

<div class="post">
    <p>Welcome to the first part of my Java 8 Concurrency tutorial. This guide teaches you <a href="http://en.wikipedia.org/wiki/Concurrent_computing">concurrent programming</a> in Java 8 with easily understood code examples. It&#39;s the first part out of a series of tutorials covering the Java Concurrency API. In the next 15 min you learn how to execute code in parallel via threads, tasks and executor services.</p>

<ul>
<li>Part 1: Threads and Executors</li>
<li>Part 2: <a href="/posts/2015/04/30/java8-concurrency-tutorial-synchronized-locks-examples/">Synchronization and Locks</a></li>
<li>Part 3: <a href="/posts/2015/05/22/java8-concurrency-tutorial-atomic-concurrent-map-examples/">Atomic Variables and ConcurrentMap</a></li>
</ul>

<p>The <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html">Concurrency API</a> was first introduced with the release of Java 5 and then progressively enhanced with every new Java release. The majority of concepts shown in this article also work in older versions of Java. However my code samples focus on Java 8 and make heavy use of lambda expressions and other new features. If you&#39;re not yet familiar with lambdas I recommend reading my <a href="/posts/2014/03/16/java-8-tutorial/">Java 8 Tutorial</a> first.</p>

<h3>Threads and Runnables</h3>

<p>All modern operating systems support concurrency both via <a href="http://en.wikipedia.org/wiki/Process_(computing)">processes</a> and <a href="http://en.wikipedia.org/wiki/Thread_%28computing%29">threads</a>. Processes are instances of programs which typically run independent to each other, e.g. if you start a java program the operating system spawns a new process which runs in parallel to other programs. Inside those processes we can utilize threads to execute code concurrently, so we can make the most out of the available cores of the CPU.</p>

<p>Java supports <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html">Threads</a> since JDK 1.0. Before starting a new thread you have to specify the code to be executed by this thread, often called the <em>task</em>. This is done by implementing <code>Runnable</code> - a functional interface defining a single void no-args method <code>run()</code> as demonstrated in the following example:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">Runnable task = () -&gt; {
    String threadName = Thread.currentThread().getName();
    System.out.println(&quot;Hello &quot; + threadName);
};

task.run();

Thread thread = new Thread(task);
thread.start();

System.out.println(&quot;Done!&quot;);
</code></pre></figure>
<p>Since <code>Runnable</code> is a functional interface we can utilize Java 8 lambda expressions to print the current threads name to the console. First we execute the runnable directly on the main thread before starting a new thread.</p>

<p>The result on the console might look like this:</p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">Hello main
Hello Thread-0
Done!
</code></pre></figure>
<p>Or that:</p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">Hello main
Done!
Hello Thread-0
</code></pre></figure>
<p>Due to concurrent execution we cannot predict if the runnable will be invoked before or after printing &#39;done&#39;. The order is non-deterministic, thus making concurrent programming a complex task in larger applications.</p>

<p>Threads can be put to sleep for a certain duration. This is quite handy to simulate long running tasks in the subsequent code samples of this article:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">Runnable runnable = () -&gt; {
    try {
        String name = Thread.currentThread().getName();
        System.out.println(&quot;Foo &quot; + name);
        TimeUnit.SECONDS.sleep(1);
        System.out.println(&quot;Bar &quot; + name);
    }
    catch (InterruptedException e) {
        e.printStackTrace();
    }
};

Thread thread = new Thread(runnable);
thread.start();
</code></pre></figure>
<p>When you run the above code you&#39;ll notice the one second delay between the first and the second print statement. <code>TimeUnit</code> is a useful enum for working with units of time. Alternatively you can achieve the same by calling <code>Thread.sleep(1000)</code>.</p>

<p>Working with the <code>Thread</code> class can be very tedious and error-prone. Due to that reason the <strong>Concurrency API</strong> has been introduced back in 2004 with the release of Java 5. The API is located in package <code>java.util.concurrent</code> and contains many useful classes for handling concurrent programming. Since that time the Concurrency API has been enhanced with every new Java release and even Java 8 provides new classes and methods for dealing with concurrency.</p>

<p>Now let&#39;s take a deeper look at one of the most important parts of the Concurrency API - the executor services.</p>

<h3>Executors</h3>

<p>The Concurrency API introduces the concept of an <code>ExecutorService</code> as a higher level replacement for working with threads directly. Executors are capable of running asynchronous tasks and typically manage a pool of threads, so we don&#39;t have to create new threads manually. All threads of the internal pool will be reused under the hood for revenant tasks, so we can run as many concurrent tasks as we want throughout the life-cycle of our application with a single executor service.</p>

<p>This is how the first thread-example looks like using executors:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">ExecutorService executor = Executors.newSingleThreadExecutor();
executor.submit(() -&gt; {
    String threadName = Thread.currentThread().getName();
    System.out.println(&quot;Hello &quot; + threadName);
});

// =&gt; Hello pool-1-thread-1
</code></pre></figure>
<p>The class <code>Executors</code> provides convenient factory methods for creating different kinds of executor services. In this sample we use an executor with a thread pool of size one.</p>

<p>The result looks similar to the above sample but when running the code you&#39;ll notice an important difference: the java process never stops! Executors have to be stopped explicitly - otherwise they keep listening for new tasks.</p>

<p>An <code>ExecutorService</code> provides two methods for that purpose: <code>shutdown()</code> waits for currently running tasks to finish while <code>shutdownNow()</code> interrupts all running tasks and shut the executor down immediately.</p>

<p>This is the preferred way how I typically shutdown executors:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">try {
    System.out.println(&quot;attempt to shutdown executor&quot;);
    executor.shutdown();
    executor.awaitTermination(5, TimeUnit.SECONDS);
}
catch (InterruptedException e) {
    System.err.println(&quot;tasks interrupted&quot;);
}
finally {
    if (!executor.isTerminated()) {
        System.err.println(&quot;cancel non-finished tasks&quot;);
    }
    executor.shutdownNow();
    System.out.println(&quot;shutdown finished&quot;);
}
</code></pre></figure>
<p>The executor shuts down softly by waiting a certain amount of time for termination of currently running tasks. After a maximum of five seconds the executor finally shuts down by interrupting all running tasks.</p>

<h4>Callables and Futures</h4>

<p>In addition to <code>Runnable</code> executors support another kind of task named <code>Callable</code>. Callables are functional interfaces just like runnables but instead of being <code>void</code> they return a value.</p>

<p>This lambda expression defines a callable returning an integer after sleeping for one second:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">Callable&lt;Integer&gt; task = () -&gt; {
    try {
        TimeUnit.SECONDS.sleep(1);
        return 123;
    }
    catch (InterruptedException e) {
        throw new IllegalStateException(&quot;task interrupted&quot;, e);
    }
};
</code></pre></figure>
<p>Callables can be submitted to executor services just like runnables. But what about the callables result? Since <code>submit()</code> doesn&#39;t wait until the task completes, the executor service cannot return the result of the callable directly. Instead the executor returns a special result of type <code>Future</code> which can be used to retrieve the actual result at a later point in time.</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">ExecutorService executor = Executors.newFixedThreadPool(1);
Future&lt;Integer&gt; future = executor.submit(task);

System.out.println(&quot;future done? &quot; + future.isDone());

Integer result = future.get();

System.out.println(&quot;future done? &quot; + future.isDone());
System.out.print(&quot;result: &quot; + result);
</code></pre></figure>
<p>After submitting the callable to the executor we first check if the future has already been finished execution via <code>isDone()</code>. I&#39;m pretty sure this isn&#39;t the case since the above callable sleeps for one second before returning the integer.</p>

<p>Calling the method <code>get()</code> blocks the current thread and waits until the callable completes before returning the actual result <code>123</code>. Now the future is finally done and we see the following result on the console:</p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">future done? false
future done? true
result: 123
</code></pre></figure>
<p>Futures are tightly coupled to the underlying executor service. Keep in mind that every non-terminated future will throw exceptions if you shutdown the executor:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">executor.shutdownNow();
future.get();
</code></pre></figure>
<p>You might have noticed that the creation of the executor slightly differs from the previous example. We use <code>newFixedThreadPool(1)</code> to create an executor service backed by a thread-pool of size one. This is equivalent to <code>newSingleThreadExecutor()</code> but we could later increase the pool size by simply passing a value larger than one.</p>

<h4>Timeouts</h4>

<p>Any call to <code>future.get()</code> will block and wait until the underlying callable has been terminated. In the worst case a callable runs forever - thus making your application unresponsive. You can simply counteract those scenarios by passing a timeout:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">ExecutorService executor = Executors.newFixedThreadPool(1);

Future&lt;Integer&gt; future = executor.submit(() -&gt; {
    try {
        TimeUnit.SECONDS.sleep(2);
        return 123;
    }
    catch (InterruptedException e) {
        throw new IllegalStateException(&quot;task interrupted&quot;, e);
    }
});

future.get(1, TimeUnit.SECONDS);
</code></pre></figure>
<p>Executing the above code results in a <code>TimeoutException</code>:</p>
<figure class="highlight"><pre><code class="language-text" data-lang="text">Exception in thread &quot;main&quot; java.util.concurrent.TimeoutException
    at java.util.concurrent.FutureTask.get(FutureTask.java:205)
</code></pre></figure>
<p>You might already have guessed why this exception is thrown: We specified a maximum wait time of one second but the callable actually needs two seconds before returning the result.</p>

<h4>InvokeAll</h4>

<p>Executors support batch submitting of multiple callables at once via <code>invokeAll()</code>. This method accepts a collection of callables and returns a list of futures.</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">ExecutorService executor = Executors.newWorkStealingPool();

List&lt;Callable&lt;String&gt;&gt; callables = Arrays.asList(
        () -&gt; &quot;task1&quot;,
        () -&gt; &quot;task2&quot;,
        () -&gt; &quot;task3&quot;);

executor.invokeAll(callables)
    .stream()
    .map(future -&gt; {
        try {
            return future.get();
        }
        catch (Exception e) {
            throw new IllegalStateException(e);
        }
    })
    .forEach(System.out::println);
</code></pre></figure>
<p>In this example we utilize Java 8 functional streams in order to process all futures returned by the invocation of <code>invokeAll</code>. We first map each future to its return value and then print each value to the console. If you&#39;re not yet familiar with streams read my <a href="/posts/2014/07/31/java8-stream-tutorial-examples/">Java 8 Stream Tutorial</a>.</p>

<h4>InvokeAny</h4>

<p>Another way of batch-submitting callables is the method <code>invokeAny()</code> which works slightly different to <code>invokeAll()</code>. Instead of returning future objects this method blocks until the first callable terminates and returns the result of that callable.</p>

<p>In order to test this behavior we use this helper method to simulate callables with different durations. The method returns a callable that sleeps for a certain amount of time until returning the given result:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">Callable&lt;String&gt; callable(String result, long sleepSeconds) {
    return () -&gt; {
        TimeUnit.SECONDS.sleep(sleepSeconds);
        return result;
    };
}
</code></pre></figure>
<p>We use this method to create a bunch of callables with different durations from one to three seconds. Submitting those callables to an executor via <code>invokeAny()</code> returns the string result of the fastest callable - in that case task2:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">ExecutorService executor = Executors.newWorkStealingPool();

List&lt;Callable&lt;String&gt;&gt; callables = Arrays.asList(
    callable(&quot;task1&quot;, 2),
    callable(&quot;task2&quot;, 1),
    callable(&quot;task3&quot;, 3));

String result = executor.invokeAny(callables);
System.out.println(result);

// =&gt; task2
</code></pre></figure>
<p>The above example uses yet another type of executor created via <code>newWorkStealingPool()</code>. This factory method is part of Java 8 and returns an executor of type <code>ForkJoinPool</code> which works slightly different than normal executors. Instead of using a fixed size thread-pool <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html">ForkJoinPools</a> are created for a given parallelism size which per default is the number of available cores of the hosts CPU.</p>

<p>ForkJoinPools exist since Java 7 and will be covered in detail in a later tutorial of this series. Let&#39;s finish this tutorial by taking a deeper look at scheduled executors.</p>

<h3>Scheduled Executors</h3>

<p>We&#39;ve already learned how to submit and run tasks once on an executor. In order to periodically run common tasks multiple times, we can utilize scheduled thread pools.</p>

<p>A <code>ScheduledExecutorService</code> is capable of scheduling tasks to run either periodically or once after a certain amount of time has elapsed.</p>

<p>This code sample schedules a task to run after an initial delay of three seconds has passed:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);

Runnable task = () -&gt; System.out.println(&quot;Scheduling: &quot; + System.nanoTime());
ScheduledFuture&lt;?&gt; future = executor.schedule(task, 3, TimeUnit.SECONDS);

TimeUnit.MILLISECONDS.sleep(1337);

long remainingDelay = future.getDelay(TimeUnit.MILLISECONDS);
System.out.printf(&quot;Remaining Delay: %sms&quot;, remainingDelay);
</code></pre></figure>
<p>Scheduling a task produces a specialized future of type <code>ScheduledFuture</code> which - in addition to <code>Future</code> - provides the method <code>getDelay()</code> to retrieve the remaining delay. After this delay has elapsed the task will be executed concurrently.</p>

<p>In order to schedule tasks to be executed periodically, executors provide the two methods <code>scheduleAtFixedRate()</code> and <code>scheduleWithFixedDelay()</code>. The first method is capable of executing tasks with a fixed time rate, e.g. once every second as demonstrated in this example:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);

Runnable task = () -&gt; System.out.println(&quot;Scheduling: &quot; + System.nanoTime());

int initialDelay = 0;
int period = 1;
executor.scheduleAtFixedRate(task, initialDelay, period, TimeUnit.SECONDS);
</code></pre></figure>
<p>Additionally this method accepts an initial delay which describes the leading wait time before the task will be executed for the first time.</p>

<p>Please keep in mind that <code>scheduleAtFixedRate()</code> doesn&#39;t take into account the actual duration of the task. So if you specify a period of one second but the task needs 2 seconds to be executed then the thread pool will working to capacity very soon.</p>

<p>In that case you should consider using <code>scheduleWithFixedDelay()</code> instead. This method works just like the counterpart described above. The difference is that the wait time period applies between the end of a task and the start of the next task. For example:</p>
<figure class="highlight"><pre><code class="language-java" data-lang="java">ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);

Runnable task = () -&gt; {
    try {
        TimeUnit.SECONDS.sleep(2);
        System.out.println(&quot;Scheduling: &quot; + System.nanoTime());
    }
    catch (InterruptedException e) {
        System.err.println(&quot;task interrupted&quot;);
    }
};

executor.scheduleWithFixedDelay(task, 0, 1, TimeUnit.SECONDS);
</code></pre></figure>
<p>This example schedules a task with a fixed delay of one second between the end of an execution and the start of the next execution. The initial delay is zero and the tasks duration is two seconds. So we end up with an execution interval of 0s, 3s, 6s, 9s and so on. As you can see <code>scheduleWithFixedDelay()</code> is handy if you cannot predict the duration of the scheduled tasks.</p>

<p>This was the first part out of a series of concurrency tutorials. I recommend practicing the shown code samples by your own. You find all code samples from this article on <a href="https://github.com/winterbe/java8-tutorial">GitHub</a>, so feel free to fork the repo and <a href="https://github.com/winterbe/java8-tutorial/stargazers">give me star</a>.</p>

<p>I hope you&#39;ve enjoyed this article. If you have any further questions send me your feedback in the comments below or via <a href="https://twitter.com/winterbe_">Twitter</a>.</p>

<ul>
<li>Part 1: Threads and Executors</li>
<li>Part 2: <a href="/posts/2015/04/30/java8-concurrency-tutorial-synchronized-locks-examples/">Synchronization and Locks</a></li>
<li>Part 3: <a href="/posts/2015/05/22/java8-concurrency-tutorial-atomic-concurrent-map-examples/">Atomic Variables and ConcurrentMap</a></li>
</ul>

</div>

<div class="social-share">
    <a class="github-button" href="https://github.com/winterbe" data-style="mega" aria-label="Follow @winterbe on GitHub">Follow @winterbe</a>
    <script async defer id="github-bjs" src="https://buttons.github.io/buttons.js"></script>

    <a href="https://twitter.com/winterbe_" class="twitter-follow-button" data-show-count="false" data-size="large" data-dnt="true">Follow @winterbe_</a>
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>

    <a href="https://twitter.com/share" class="twitter-share-button"{count} data-via="winterbe_" data-size="large" data-dnt="true">Tweet</a>
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
</div>

<section class="author">
    <div class="avatar"></div>
    Benjamin is Software Engineer, Full Stack Developer at <a href="http://pondus.de/en/homepage/">Pondus</a>, an excited runner and table foosball player.
    Get in touch on <a href="https://twitter.com/winterbe_">Twitter</a> and <a href="https://github.com/winterbe">GitHub</a>.
</section>

<p style="margin-bottom: 60px; text-align: center;">
    <a href="https://github.com/winterbe/sequency">Do you know Sequency?</a>
</p>

<h3 class="center">Read More</h3>

<ul class="tabs center device-large">
    <li class="tab active">
        <a href="#">Recent</a>
    </li>
    <li class="tab">
        <a href="/blog/">All Posts</a>
    </li>
    <li class="tab">
        <a href="/java/">Java</a>
    </li>
    <li class="tab">
        <a href="/javascript/">JavaScript</a>
    </li>
    <li class="tab">
        <a href="/tutorials/">Tutorials</a>
    </li>
</ul>

<ul class="tabs center device-small">
    <li class="tab active">
        <a href="#">Recent</a>
    </li>
    <li class="tab">
        <a href="/blog/">All Posts</a>
    </li>
    <li class="tab">
        <a href="/java/">Java</a>
    </li>
    <li class="tab">
        <a href="/tutorials/">Tutorials</a>
    </li>
</ul>

<ul class="blog-items read-more">
    
    
    <li class="blog-item center">
        <a href="/posts/2015/08/24/integrate-reactjs-into-jquery-webapps/">
            <h1>Integrating React.js into Existing jQuery Web Applications</h1>
        </a>
    </li>
    
    
    
    <li class="blog-item center">
        <a href="/posts/2015/05/22/java8-concurrency-tutorial-atomic-concurrent-map-examples/">
            <h1>Java 8 Concurrency Tutorial: Atomic Variables and ConcurrentMap</h1>
        </a>
    </li>
    
    
    
    <li class="blog-item center">
        <a href="/posts/2015/04/30/java8-concurrency-tutorial-synchronized-locks-examples/">
            <h1>Java 8 Concurrency Tutorial: Synchronization and Locks</h1>
        </a>
    </li>
    
    
    
    
    
    <li class="blog-item center">
        <a href="/posts/2015/03/25/java8-examples-string-number-math-files/">
            <h1>Java 8 API by Example: Strings, Numbers, Math and Files</h1>
        </a>
    </li>
    
    
</ul>

    </div>

    <footer>
        © 2009-2017 Benjamin Winterberg
    </footer>
</div>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
<script src="/js/prism.js"></script>
<script src="/js/main.js"></script>

</body>
</html>
